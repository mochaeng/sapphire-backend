basePath: /v1
definitions:
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user:
        $ref: '#/definitions/models.UserComment'
      user_id:
        type: integer
    type: object
  models.CreatePostResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      media_url:
        type: string
      tags:
        items:
          type: string
        type: array
      tittle:
        type: string
      user_id:
        type: integer
    type: object
  models.CreateTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  models.CreateTokenResponse:
    properties:
      token:
        type: string
    type: object
  models.GetPostResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      media_url:
        type: string
      tags:
        items:
          type: string
        type: array
      tittle:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.GetUserResponse:
    properties:
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      username:
        type: string
    type: object
  models.PostWithMetadata:
    properties:
      comment_count:
        type: integer
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      createdAt:
        type: string
      id:
        type: integer
      media:
        type: string
      tags:
        items:
          type: string
        type: array
      tittle:
        type: string
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      first_name:
        maxLength: 30
        minLength: 2
        type: string
      last_name:
        maxLength: 30
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      username:
        maxLength: 16
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - password
    - username
    type: object
  models.RegisterUserResponse:
    properties:
      created_at:
        type: string
      is_active:
        type: boolean
      token:
        type: string
      username:
        type: string
    type: object
  models.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      name:
        type: string
    type: object
  models.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        minLength: 1
        type: string
      tittle:
        maxLength: 100
        minLength: 1
        type: string
    type: object
  models.UpdatePostResponse:
    properties:
      content:
        type: string
      tittle:
        type: string
      updated_at:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      lastName:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      username:
        type: string
    type: object
  models.UserComment:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      username:
        type: string
    type: object
  models.UserResponse:
    properties:
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Sapphire
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Sapphire API
paths:
  /auth/register/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/models.RegisterUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - auth
  /auth/token:
    post:
      consumes:
      - application/json
      description: This token is used for a user to access protected routes
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.CreateTokenPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Token
          schema:
            $ref: '#/definitions/models.CreateTokenResponse'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token for a activated user
      tags:
      - auth
  /post:
    post:
      consumes:
      - multipart/form-data
      description: A activated and authenticated user can create a post
      parameters:
      - description: Post tittle
        in: formData
        name: tittle
        required: true
        type: string
      - description: Post content
        in: formData
        name: content
        required: true
        type: string
      - description: Post media
        in: formData
        name: media
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreatePostResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Creates a post
      tags:
      - post
  /post/{postID}:
    delete:
      consumes:
      - application/json
      description: Delete a post by ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Deletes a post
      tags:
      - post
    get:
      consumes:
      - application/json
      description: Gets a post by its own ID
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetPostResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Gets a post
      tags:
      - post
    patch:
      consumes:
      - application/json
      description: Allows a user to update their own post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      - description: Update post payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UpdatePostResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Updates a post
      tags:
      - post
  /user/{userID}:
    get:
      consumes:
      - application/json
      description: Fetches by ID users that are already activated in the system.
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a user
      tags:
      - user
  /user/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Allows a user to follow another one
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follows a user
      tags:
      - user
  /user/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: Allows a user to unfollow another one
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollows a user
      tags:
      - user
  /user/{username}:
    get:
      consumes:
      - application/json
      description: Fetches a user by their username
      parameters:
      - description: User username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserResponse'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Fetches a user
      tags:
      - user
  /user/activate/{token}:
    put:
      description: Activates a user by using a invitation token
      parameters:
      - description: Invitation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Activates a user in the application
      tags:
      - user
  /user/feed:
    get:
      consumes:
      - application/json
      description: A feed contains the user own's posts and the ones their follow
      parameters:
      - description: Since
        in: query
        name: since
        type: string
      - description: Until
        in: query
        name: until
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      - description: Offset
        in: query
        name: sort
        type: string
      - description: Offset
        in: query
        name: tags
        type: string
      - description: Offset
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostWithMetadata'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Gets the user feed
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
